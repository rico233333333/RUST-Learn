fn main() {
    // 所有权
    // stack栈内存 heap堆内存
    // stack按值的接收顺序来存储，按相反的顺序将他们移除 (后进先出LIFO)
    // 添加数据叫做压入栈
    // 移除数据叫做弹出栈
    // 所有存储在Stack上的数据必须拥有已知的固定大小
    // stack速度快 因为存储数据的时候操作系统不需要寻找用来存储新数据的空间 那个位置永远都是stack的顶端
    // heap上分配内存空间需要做更多的工作
    // 操作系统必须找一个足够大的空间来存放数据，然后做好记录方便下次分配


    // 数据访问
    // 对于heap中的数据要比访问stack中数据慢因为要通过指针来寻找

    // 函数调用
    // 当你调用函数时 值被传入到函数 也包括指向heap的指针 函数本地的变量被压到stack上 当函数结束后 这些值会从stack内存上弹出

    // 存在原因
    // 解决问题
    // 跟踪代码的那些部分正在使用heap的那些数据
    // 最小化heap上的重复数据
    // 清理heap上未使用的数据已避免空间不足

    // String类型
    let mut s = String::from("hello");  // 可变
    s.push_str(",world");
    println!("{}", s);
    // let s2 = s;
    // println!("{}",s);  // 失效了 s 不可再次应用
    let _s2 = s.clone();  // 深拷贝克隆
    println!("{}",s);  // 失效了 s 不可再次应用
}
